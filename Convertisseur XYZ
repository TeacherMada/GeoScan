<!doctype html>

<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Convertisseur PQWT → XYZ (Oasis montaj)</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
  <script src="https://cdn.plot.ly/plotly-2.35.2.min.js"></script>
</head>
<body class="bg-slate-50 text-slate-800">
  <div class="max-w-6xl mx-auto p-4 md:p-8">
    <header class="mb-6">
      <h1 class="text-2xl md:text-4xl font-bold tracking-tight">Convertisseur PQWT → XYZ</h1>
      <p class="text-sm md:text-base text-slate-600 mt-2">
        Importez un fichier brut <span class="font-mono">PQWT (*.CSV)</span>, visualisez les données, puis exportez automatiquement en <span class="font-mono">_xyz.csv</span> filtré par Ymin / Ymax.
      </p>
    </header><!-- Import -->
<section class="bg-white rounded-2xl shadow p-4 md:p-6 mb-6">
  <h2 class="font-semibold text-lg mb-3">1) Importer fichier brut</h2>
  <input id="rawFile" type="file" accept=".csv" class="block w-full file:mr-4 file:py-2 file:px-4 file:rounded-xl file:border-0 file:text-sm file:font-semibold file:bg-slate-800 file:text-white hover:file:bg-slate-700" />
  <p id="fileInfo" class="text-xs text-slate-500 mt-2"></p>
  <div class="mt-4">
    <h3 class="text-sm font-semibold mb-2">Aperçu du fichier brut (100 premières lignes)</h3>
    <div id="rawPreview" class="overflow-auto max-h-[300px] border rounded-xl text-xs"></div>
  </div>
</section>

<!-- Paramètres Y -->
<section class="bg-white rounded-2xl shadow p-4 md:p-6 mb-6">
  <h2 class="font-semibold text-lg mb-3">2) Filtrage des profondeurs (Y)</h2>
  <div class="grid grid-cols-2 gap-3 mb-2">
    <label>
      <span class="text-sm">Y min (m)</span>
      <input id="yMin" type="number" step="0.1" value="-3" class="mt-1 w-full rounded-xl border-slate-300 focus:border-slate-500 focus:ring-slate-500" />
    </label>
    <label>
      <span class="text-sm">Y max (m)</span>
      <input id="yMax" type="number" step="0.1" value="-100" class="mt-1 w-full rounded-xl border-slate-300 focus:border-slate-500 focus:ring-slate-500" />
    </label>
  </div>
  <label class="flex items-center gap-2 mt-2">
    <input id="negY" type="checkbox" class="h-4 w-4" checked />
    <span class="text-sm">Y négatif (par défaut : activé)</span>
  </label>
</section>

<!-- Export -->
<section class="bg-white rounded-2xl shadow p-4 md:p-6 mb-6">
  <h2 class="font-semibold text-lg mb-3">3) Export</h2>
  <button id="btnConvert" class="w-full py-2 rounded-2xl bg-emerald-600 text-white font-semibold hover:bg-emerald-700">Convertir & Télécharger</button>
  <p class="mt-3 text-xs text-slate-500">Le fichier exporté aura le même nom que l'entrée, avec suffixe <span class="font-mono">_xyz.csv</span>.</p>
  <div class="mt-4">
    <h3 class="text-sm font-semibold mb-2">Aperçu du fichier exporté (100 premières lignes)</h3>
    <div id="exportPreview" class="overflow-auto max-h-[300px] border rounded-xl text-xs"></div>
  </div>
</section>

<!-- Chart -->
<section class="bg-white rounded-2xl shadow p-4 md:p-6">
  <h2 class="font-semibold text-lg mb-3">Courbes de résistivité (toutes fréquences)</h2>
  <div id="chart" class="w-full h-[360px]"></div>
</section>

<footer class="mt-10 text-center text-xs text-slate-500">
  Conversion locale dans votre navigateur. Aucun envoi sur serveur.
</footer>

  </div><script>
const DEFAULT_DEPTHS = [
  -3, -6, -10, -13, -16, -20, -23, -26, -30, -33,
  -36, -40, -43, -46, -50, -53, -56, -60, -63, -66,
  -70, -73, -76, -80, -83, -86, -90, -93, -96, -100
];

let rawData = null;
let freqCols = [];
let inputFileName = "";
let exportRows = [];

function toNumber(v) {
  if (v === null || v === undefined) return 0;
  if (typeof v === 'number') return v;
  return Number(String(v).replace(',', '.'));
}

function download(filename, text) {
  const blob = new Blob([text], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url; a.download = filename; a.click();
  URL.revokeObjectURL(url);
}

function makeTable(rows, header) {
  const table = document.createElement('table');
  table.className = 'min-w-full text-[11px]';
  if (header) {
    const thead = document.createElement('thead');
    thead.innerHTML = `<tr class="bg-slate-100">${header.map(h=>`<th class="px-2 py-1 text-left">${h}</th>`).join('')}</tr>`;
    table.appendChild(thead);
  }
  const tbody = document.createElement('tbody');
  rows.forEach((r,i)=>{
    const tr = document.createElement('tr');
    if (i % 2) tr.className = 'bg-slate-50';
    tr.innerHTML = Object.values(r).map(v=>`<td class="px-2 py-1">${v}</td>`).join('');
    tbody.appendChild(tr);
  });
  table.appendChild(tbody);
  return table;
}

function handleRawParsed(data) {
  const cols = Object.keys(data[0] || {});
  freqCols = cols.filter(c => /^\s*freq\d+\s*$/i.test(c)).sort((a,b)=>{
    const na = Number(a.match(/\d+/)[0]);
    const nb = Number(b.match(/\d+/)[0]);
    return na - nb;
  });
  rawData = data.filter(r => r.N !== undefined && r.N !== null && String(r.N).trim() !== '');

  // Aperçu brut
  const rawPreview = document.getElementById('rawPreview');
  rawPreview.innerHTML = '';
  rawPreview.appendChild(makeTable(rawData.slice(0,100), Object.keys(rawData[0] || {})));

  // Graph
  const x = rawData.map(r => toNumber(r.N));
  const traces = freqCols.map(c => ({
    name: c,
    x,
    y: rawData.map(r => toNumber(r[c])),
    mode: 'lines+markers',
    type: 'scatter'
  }));
  Plotly.newPlot('chart', traces, {
    margin: {l:50, r:20, t:10, b:40},
    xaxis: {title: 'Station (N)'},
    yaxis: {title: 'Résistivité (Ω·m)'},
    legend: {orientation: 'h', x: 0, y: 1.1}
  }, {responsive: true, displaylogo: false});
}

function convertAndDownload() {
  if (!rawData || !freqCols.length) {
    alert('Veuillez importer un fichier brut PQWT (.csv) d\'abord.');
    return;
  }
  const neg = document.getElementById('negY').checked;
  let ymin = toNumber(document.getElementById('yMin').value);
  let ymax = toNumber(document.getElementById('yMax').value);

  if (neg) {
    if (ymin > 0) ymin = -Math.abs(ymin);
    if (ymax > 0) ymax = -Math.abs(ymax);
    if (ymin > ymax) [ymin, ymax] = [ymax, ymin];
  } else {
    ymin = Math.abs(ymin);
    ymax = Math.abs(ymax);
    if (ymin > ymax) [ymin, ymax] = [ymax, ymin];
  }

  exportRows = [];
  for (const r of rawData) {
    const X = Number(toNumber(r.N).toFixed(6));
    for (let i = 0; i < DEFAULT_DEPTHS.length; i++) {
      const Y = neg ? DEFAULT_DEPTHS[i] : Math.abs(DEFAULT_DEPTHS[i]);
      if (Y >= ymin && Y <= ymax) {
        const Z = Number((toNumber(r[freqCols[i]]) ?? 0));
        exportRows.push({X, Y, Z});
      }
    }
  }

  // Aperçu export
  const expPrev = document.getElementById('exportPreview');
  expPrev.innerHTML = '';
  expPrev.appendChild(makeTable(exportRows.slice(0,100), ['X','Y','Z']));

  // Export CSV
  const sep = ',';
  const header = ['X','Y','Z'].join(sep);
  const body = exportRows.map(r => [r.X, r.Y, r.Z].join(sep)).join('\n');
  const text = header + '\n' + body + '\n';

  const outName = inputFileName.replace(/\.csv$/i, '') + '_xyz.csv';
  download(outName, text);
}

// Events
document.getElementById('rawFile').addEventListener('change', (e) => {
  const file = e.target.files?.[0];
  if (!file) return;
  inputFileName = file.name;
  document.getElementById('fileInfo').textContent = `${file.name} – ${(file.size/1024).toFixed(1)} Ko`;
  Papa.parse(file, {
    header: true,
    dynamicTyping: true,
    skipEmptyLines: true,
    complete: (res) => {
      if (!res.data?.length) { alert('Fichier vide ou entêtes manquantes.'); return; }
      handleRawParsed(res.data);
    },
    error: (err) => alert('Erreur de lecture CSV : ' + err.message)
  });
});

document.getElementById('btnConvert').addEventListener('click', convertAndDownload);
</script></body>
</html>
